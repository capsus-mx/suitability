library(reshape2)
## time series
library(scales)
library(sp)
#Load your data
hou16<-read.csv(file='/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Data/2016_FLPP_Final.csv',header = T)
hou17<-read.csv(file='/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Data/2017_FLPP_Final.csv',header = T)
value<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_existing_analisis_mid_AOI.tif')
# Clean and configure data
#Desired extent (110.2257, 110.5525, -7.169167, -6.88165)
#2016
af_hou16<-subset(hou16, !(lng > 110.5525|lng < 110.2257) & !(lat < -7.169167 | lat > -6.88165),select = c(3,7,10,17,18))
colnames(af_hou16) <- c("Address", "Kota","Housing_DevName","lat","lng")
af_hou16$Year<-2016
#2017
af_hou17<-subset(hou17,!(x_coord > 110.5525|x_coord < 110.2257) & !(y_coord < -7.169167 | y_coord > -6.88165), select = c(2,4,9,10,23,24))
colnames(af_hou17) <- c("Address", "Kota","Housing_DevName","Year","lng","lat")
#merge datasets
housing<-rbind(af_hou16,af_hou17)
colnames(housing)<-c("Address","Kota","Housing_DevName","y","x","Year")
#Raster values to data frame
st_value<-as.data.frame(rasterToPoints(x = value))
colnames(st_value)<-c("x","y","value")
st_value<-as.data.frame(st_value)
# Function: cut_data
# Description
# Returns a subset of the precipitation_table dataframe. The function "cuts" the data which is beyond side.length degrees.
# Usage
# cut_data(x, y, dataset = precipitation_table, side.length = 0.1)
# Arguments
# x (numeric): longitude in decimal degrees
# y (numeric): latitude in decimal degrees
# dataset (df): a dataframe with lat lon columns
# side.length (numeric): the side.length of the cut expressed in decimal degrees
cut_data <- function(x, y, dataset = NULL, side.length = 0.8){
return(
dataset[dataset[,"x"] < x + side.length &
dataset[,"x"] > x - side.length &
dataset[,"y"] < y + side.length &
dataset[,"y"] > y - side.length  , ])
}
# Function: estimate_distance
# Description
# Estimates distance in meters between two pairs of latitude and longitude points
# Usage
# estimate_distance(x1, y1, x2, y2)
# Arguments
# x1 (numeric): longitude in decimal degrees of the start-point
# y1 (numeric): latitude in decimal degrees of the start-point
# x2 (numeric): vector with longitude values in decimal degrees of the end-point
# y2 (numeric): vector with latitude values in decimal degrees of the end-point
estimate_distance <- function(x1, y1, x2, y2){
return(
t(spDists(
SpatialPoints(coords = data.frame(x = x1, y = y1), proj4string=CRS("+proj=longlat +datum=WGS84")),
SpatialPoints(coords = data.frame(x = x2, y = y2), proj4string=CRS("+proj=longlat +datum=WGS84")),
longlat=T))
)
}
# Function: nearest_neighbor
# Description
#
# Usage
#
# Arguments
#
nearest_neighbor <- function(x, y, which.column  = "z", dataset){
temp <- cut_data(x = x, y = y, dataset = dataset)
if(nrow(temp) >= 1){
temp$dist <- estimate_distance(x1 = x, y1 = y, x2 = temp$x, y2 = temp$y)
temp <- temp[which.min(temp$dist),]
# TEMP$exists <- TRUE
# TEMP$annual <- as.numeric(temp$a)
# TEMP$values <- as.numeric(temp[1,3:14])
return(as.numeric(temp[which.column]))
} else {
temp <- 0
return(temp)
}
}
#Plot ST values & location of dwellings
ggplot() +
geom_point(data = st_value, aes(x = x, y = y, size =value), color="red") +
geom_point(data = housing, aes(x = x, y = y, colour=Year))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = st_value,
aes(x=x,
y=y,
colour=value),
alpha = 0.70,
shape = 15)+
geom_point(data = housing,
aes(x=x,
y=y,
shape=as.factor(Year)),
colour="white",
size=3)+
geom_point(data = housing,
aes(x=x,
y=y,
shape=as.factor(Year)),
colour="black",
size=2)+
scale_shape_discrete(name="Year")+
scale_colour_gradientn(colours=cheer_up, name="ST index")+
labs(x="Longitude",y="Latitude")+
coord_equal()+
theme_classic()
# Add value of ST raster to nearest housing
housing$index <- 1000 # Let's create an index column with dummy data for validation
for(r in 1:nrow(housing)){
housing[r, "index"]<- nearest_neighbor(x = housing[r, "x"],
y = housing[r, "y"],
which.column = "value",
dataset = st_value)
}
head(housing)
h <- housing[,c("y", "x", "Year", "index")]
ggplot(h) +
geom_boxplot(aes(x = as.factor(Year), y = index))+
labs(x="Year",y="ST index") +
ggtitle("Housing units")
ggplot(unique(h)) +
geom_boxplot(aes(x = as.factor(Year), y = index))+
labs(x="Year",y="ST index") +
ggtitle("Housing developments")
ggplot(housing) +
geom_jitter(aes(x = as.factor(Year), y = index))+
labs(x="Year",y="ST index")
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)
ggplot(unique(h)) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
ggtitle("Housing Units Density")
ggplot(unique(h)) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
ggtitle("Housing Developments Density")
ggplot(unique(h)) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5, name="Year")+
labs(x="ST index",y="Density")+
ggtitle("Housing Developments Density")
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
scale_fill_manual(name="Year")
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
scale_fill(name="Year")
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
scale_fill_discrete(name="Year")
ggplot(housing) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5)+
labs(x="ST index",y="Density")+
scale_fill_discrete(name="Year")+
ggtitle("Housing Units Density")
ggplot(unique(h)) +
geom_density(aes(fill = as.factor(Year), x = index), alpha = 0.5, name="Year")+
labs(x="ST index",y="Density")+
scale_fill_discrete(name="Year")+
ggtitle("Housing Developments Density")
ggplot(h) +
geom_boxplot(aes(x = as.factor(Year), y = index))+
labs(x="Year",y="ST index") +
ggtitle("Housing units")
ggplot(unique(h)) +
geom_boxplot(aes(x = as.factor(Year), y = index))+
labs(x="Year",y="ST index") +
ggtitle("Housing developments")
library(ggmap)
cheer_up <- c("#C44D58",
"#FF6B6B",
"#C7F464",
"#4ECDC4",
"#556270")
r1<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_allequal.tif')
r2<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_catequal.tif')
r3<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_econ.tif')
r4<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_edu.tif')
r5<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_health.tif')
r6<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_services.tif')
r7<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_transp.tif')
r12<-aggregate(r1,fun=mean,fact=10)
r22<-aggregate(r2,fun=mean,fact=10)
r32<-aggregate(r3,fun=mean,fact=10)
r42<-aggregate(r4,fun=mean,fact=10)
r52<-aggregate(r5,fun=mean,fact=10)
r62<-aggregate(r6,fun=mean,fact=10)
r72<-aggregate(r7,fun=mean,fact=10)
r_ave<-(r12+r22+r32+r42+r52+r62+r72)/7
ave<-rasterToPoints(r_ave)
colnames(ave)<-c("x","y","value")
s <- stackApply(x = stack(r1, r2, r3, r4, r5, r6, r7),
indices = rep(1, 7),
fun = sd)
s<-aggregate(s,fun=mean,fact=10)
s1 <- rasterToPoints(s)
colnames(s1)<-c("x","y","index")
a <- merge(ave, s1)
head(a)
colnames(a)<-c("x","y","value","agree")
a <- as.data.frame(a)
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement", )+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic(legend.text=element_text(size=4))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement", )+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=4))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement", )+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=6))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement", )+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement",legend.text=element_text(size=15) )+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=15))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=15))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=15),axis.text=element_text(size=12),
axis.title=element_text(size=14))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = a,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
semarang_cost_of_land <- read.csv("/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Data/semarang_cost_of_land.csv")
#Find the Central Business District based on $/area
CDB <- semarang_cost_of_land[which.max(semarang_cost_of_land$pc),]
CDB <- subset(CDB,select=c("lat", "lon"))
#Clean data
semarang_cost_of_land <- subset(semarang_cost_of_land, d < 6.2 | d > 6.3)
#Recalculate d from each point
for(r in 1:nrow(semarang_cost_of_land)){
semarang_cost_of_land[r, "d"]<- estimate_distance(x1 = semarang_cost_of_land[r, "lon"],
y1 = semarang_cost_of_land[r, "lat"],
x2 = CDB$lon,
y2 = CDB$lat)
}
ggplotly(ggplot(data = semarang_cost_of_land) +
geom_histogram(aes(x = d))
)# +
g <- ggplot(data = semarang_cost_of_land,
mapping = aes(x = d, y = pc)) +
geom_point() +
geom_smooth()
# scale_x_log10()
# scale_y_log10()
g
semarang_cost_of_land$distance <- cut(x = semarang_cost_of_land$d, breaks = c(seq(0,20,5), 30))
semarang_cost_of_land <- semarang_cost_of_land[complete.cases(semarang_cost_of_land),]
ggplotly(ggplot(semarang_cost_of_land) +
geom_boxplot(aes(x = distance, y = pc))
)
r3<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_econ.tif')
r4<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_edu.tif')
r5<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_health.tif')
r6<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_services.tif')
r7<-raster('/Users/jeda/Desktop/Indonesia Final/Housing Guidelines/Rasters/Suitability_transp.tif')
r1<-rasterToPoints(r1)
r2<-rasterToPoints(r2)
r3<-rasterToPoints(r3)
r4<-rasterToPoints(r4)
r5<-rasterToPoints(r5)
View(r1)
colnames(r1)<-c("x","y","value")
colnames(r2)<-c("x","y","value")
colnames(r3)<-c("x","y","value")
colnames(r4)<-c("x","y","value")
colnames(r5)<-c("x","y","value")
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = r1,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = r1,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
r1<-as.data.frame(r1)
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = r1,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = r1,
aes(x=x,
y=y,
colour=value,
size=agree^5),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
ggmap(get_map(location = c(lon = 110.370, lat = -7.02),
zoom = 11,
color = "bw",
maptype = "hybrid")) +
geom_point(data = r1,
aes(x=x,
y=y,
colour=value),
alpha = 0.70,
# ,
shape = 15)+
scale_colour_gradientn(colours=cheer_up,name="ST index")+
scale_size(name="Agreement")+
labs(x="Longitude", y="Latitude")+
coord_equal()+
theme_classic()+
theme(legend.text=element_text(size=13),axis.text=element_text(size=12),
axis.title=element_text(size=14))
